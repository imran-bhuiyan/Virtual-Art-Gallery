package com.example.test_project;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.event.ActionEvent;
import java.io.*;
import java.net.Socket;
import java.sql.*;

public class CustomerMessageController extends BaseController {

    @FXML private ListView<String> messageListView;
    @FXML private TextField messageField;
    @FXML private Label chatPartnerLabel;
    @FXML private ListView<String> chatPartnerListView;

    private PrintWriter out;
    private BufferedReader in;
    private int currentArtistId;

    @FXML
    public void initialize() {
        System.out.println("Initializing CustomerMessengerController");
        validateComponents();
    }

    private void validateComponents() {
        if (messageListView == null) System.err.println("Error: messageListView is null");
        if (messageField == null) System.err.println("Error: messageField is null");
        if (chatPartnerLabel == null) System.err.println("Error: chatPartnerLabel is null");
        if (chatPartnerListView == null) System.err.println("Error: chatPartnerListView is null");
    }

    @Override
    public void setUserId(int userId) {
        super.setUserId(userId);
        System.out.println("CustomerMessengerController: Setting userId to " + userId);
        connectToServer();
        loadChatPartners();
    }

    private void connectToServer() {
        try {
            Socket socket = new Socket("localhost", 12345);
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            new Thread(this::readMessagesFromServer).start();

            out.println(userId);
            System.out.println("Connected to server successfully");
        } catch (IOException e) {
            System.err.println("Error connecting to server: " + e.getMessage());
            e.printStackTrace();
            showAlert("Connection Error", "Failed to connect to the server. Please try again later.");
        }
    }

    private void readMessagesFromServer() {
        try {
            String message;
            while ((message = in.readLine()) != null) {
                System.out.println("Received message: " + message);
                if (message.startsWith("MESSAGE ")) {
                    String[] parts = message.split(" ", 3);
                    int senderId = Integer.parseInt(parts[1]);
                    String content = parts[2];
                    Platform.runLater(() -> displayMessage(senderId, content));
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading messages from server: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayMessage(int senderId, String content) {
        String displayText = (senderId == userId) ? "You: " + content : "Artist: " + content;
        System.out.println("Displaying message: " + displayText);
        if (messageListView != null) {
            messageListView.getItems().add(displayText);
        } else {
            System.err.println("Error: messageListView is null when trying to display message");
        }
    }

    @FXML
    void sendMessage() {
        String message = messageField.getText();
        if (!message.isEmpty() && currentArtistId != 0) {
            System.out.println("Sending message: " + message + " to artist ID: " + currentArtistId);
            out.println("SEND " + currentArtistId + " " + message);
            saveChatMessage(userId, currentArtistId, message);
            messageField.clear();
        } else {
            System.out.println("Message not sent. Empty message or no artist selected.");
        }
    }

    private void saveChatMessage(int senderId, int receiverId, String content) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO ChatMessages (sender_id, receiver_id, content) VALUES (?, ?, ?)")) {
            pstmt.setInt(1, senderId);
            pstmt.setInt(2, receiverId);
            pstmt.setString(3, content);
            pstmt.executeUpdate();
            System.out.println("Message saved to database");
        } catch (SQLException e) {
            System.err.println("Error saving message to database: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void loadChatPartners() {
        System.out.println("Loading chat partners for user ID: " + userId);
        chatPartnerListView.getItems().clear();
        String query = "SELECT DISTINCT u.user_id, u.name " +
                "FROM Users u " +
                "JOIN ChatMessages m ON (u.user_id = m.sender_id OR u.user_id = m.receiver_id) " +
                "WHERE (m.sender_id = ? OR m.receiver_id = ?) AND u.user_id != ? AND u.role = 'artist' " +
                "ORDER BY u.name";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, userId);
            pstmt.setInt(3, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                int artistId = rs.getInt("user_id");
                String artistName = rs.getString("name");
                System.out.println("Adding chat partner: " + artistName + " (ID: " + artistId + ")");
                chatPartnerListView.getItems().add(artistName);
            }

            setupChatPartnerSelection();
        } catch (SQLException e) {
            System.err.println("Error loading chat partners: " + e.getMessage());
            e.printStackTrace();
            showAlert("Database Error", "Failed to load chat partners. Please try again later.");
        }
    }

    private void setupChatPartnerSelection() {
        chatPartnerListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                System.out.println("Selected chat partner: " + newValue);
                initChat(getArtistIdByName(newValue), newValue);
            }
        });
    }

    private int getArtistIdByName(String artistName) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT user_id FROM Users WHERE name = ? AND role = 'artist'")) {
            // Fix: Change setInt to setString since artistName is a String
            pstmt.setString(1, artistName);  // Changed from setInt to setString
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                int artistId = rs.getInt("user_id");
                System.out.println("Found artist ID: " + artistId + " for name: " + artistName);
                return artistId;
            }
        } catch (SQLException e) {
            System.err.println("Error getting artist ID: " + e.getMessage());
            e.printStackTrace();
        }
        System.out.println("Artist ID not found for name: " + artistName);
        return -1;
    }

    private void initChat(int artistId, String artistName) {
        System.out.println("Initializing chat with artist ID: " + artistId + ", name: " + artistName);
        this.currentArtistId = artistId;
        chatPartnerLabel.setText("Chat with " + artistName);
        loadChatHistory(artistId);
    }

    private void loadChatHistory(int artistId) {
        System.out.println("Loading chat history with artist ID: " + artistId);
        messageListView.getItems().clear();
        String query = "SELECT sender_id, content FROM ChatMessages " +
                "WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) " +
                "ORDER BY sent_at";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, artistId);
            pstmt.setInt(3, artistId);
            pstmt.setInt(4, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                displayMessage(rs.getInt("sender_id"), rs.getString("content"));
            }
        } catch (SQLException e) {
            System.err.println("Error loading chat history: " + e.getMessage());
            e.printStackTrace();
            showAlert("Database Error", "Failed to load chat history. Please try again later.");
        }
    }

    private void showAlert(String title, String content) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(content);
            alert.showAndWait();
        });
    }

    // Navigation methods using BaseController's loadPage method
    @FXML void CustomerLogout(ActionEvent event) throws IOException {
        loadPage(event, "Guest/userOrGuestHomePage.fxml");
    }

    @FXML void goCustomerHome(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerHomePage.fxml");
    }

    @FXML void goCustomerPaintings(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPaintingPage.fxml");
    }

    @FXML void goCustomerTopArt(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPageTopArt.fxml");
    }

    @FXML void goCustomerEvents(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerEventPage.fxml");
    }

    @FXML void goCustomerAuction(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerLiveAuctionPage.fxml");
    }

    @FXML void goCustomerNFT(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerNFTpage.fxml");
    }

    @FXML void goCustomerProfile(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerProfilePage.fxml");
    }

    @FXML void goCustomerCart(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPaintingCheckout.fxml");
    }

    @FXML void goCustomerNotification(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerNotification.fxml");
    }

    @FXML void goCustomerMessages(ActionEvent event) {
        System.out.println("Already on the messages page");
    }
}

//painting

package com.example.test_project;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.scene.control.Button;
import javafx.scene.text.Text;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.util.Duration;
import org.controlsfx.control.Notifications;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class customerPaintingController extends BaseController {

    @FXML
    private ComboBox<String> categoryComboBox;
    @FXML
    private VBox paintingsContainer;

    private DataBaseConnection dbConnection = new DataBaseConnection();
    private static final String IMAGE_DIRECTORY = "D:\\Trimester\\8th\\AOOP\\IntellijIdea\\Test_Project\\src\\main\\java\\Uploads";



    @FXML
    public void initialize() {
        categoryComboBox.getItems().addAll("All Categories", "Oil paint", "Acrylic paint", "Watercolor", "Gouache", "Tempera", "Encaustic", "Casein", "Alkyd");
        categoryComboBox.setValue("All Categories");
        categoryComboBox.setOnAction(event -> loadPaintings());
//        loadPaintings();
    }

    @Override
    public void setUserId(int userId) {
        super.setUserId(userId);
        System.out.println("CustomerPaintingController: setUserId() called with userId: " + userId);
        loadPaintings();
    }



    private void loadPaintings() {
        paintingsContainer.getChildren().clear();
        String selectedCategory = categoryComboBox.getValue();

        String query = "SELECT p.painting_id, p.name as Title, u.name as Artist, p.year, p.category, p.price, p.image_url,COUNT(r.painting_id) as Reaction " +
                "FROM paintings as p JOIN users as u ON p.artist_id = u.user_id " +
                "LEFT JOIN reactions as r ON r.painting_id = p.painting_id " +
                "WHERE p.category = ? OR ? = 'All Categories' " +
                "GROUP BY p.painting_id";

        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, selectedCategory);
            pstmt.setString(2, selectedCategory);

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    AnchorPane paintingCard = createPaintingCard(

                            rs.getString("Title"),
                            rs.getString("Artist"),
                            rs.getInt("year"),
                            rs.getString("category"),
                            rs.getDouble("price"),
                            rs.getInt("Reaction"),
                            rs.getString("image_url"),
                            rs.getInt("painting_id")

                            );
                    paintingsContainer.getChildren().add(paintingCard);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately
        }
    }

    private AnchorPane createPaintingCard(String title, String artist, int year, String category, double price, int reactions , String imageUrl,int paintingId) {
        AnchorPane card = new AnchorPane();
        card.setPrefSize(860, 213);
        card.setStyle("-fx-background-color: #f0f0f0; -fx-border-color: #cccccc; -fx-border-width: 1;");

        Text titleText = new Text(title);
        titleText.setLayoutX(220);
        titleText.setLayoutY(30);
        titleText.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        Text artistText = new Text("Artist: " + artist);
        artistText.setLayoutX(220);
        artistText.setLayoutY(57);

        Text yearText = new Text("Year: " + year);
        yearText.setLayoutX(220);
        yearText.setLayoutY(87);

        Text categoryText = new Text("Category: " + category);
        categoryText.setLayoutX(220);
        categoryText.setLayoutY(114);

        Text priceText = new Text("Price: $" + price);
        priceText.setLayoutX(220);
        priceText.setLayoutY(142);

        Text reactionText = new Text(String.valueOf(reactions));
        reactionText.setLayoutX(269);
        reactionText.setLayoutY(170);
        Button addToCartButton = new Button("Add to Cart");
        addToCartButton.setLayoutX(800);
        addToCartButton.setLayoutY(10);
        addToCartButton.setStyle("-fx-background-color: #40E0D0;");
        addToCartButton.setOnAction(event -> addToCart(paintingId, title));

        Button chatWithArtistButton = new Button("Chat with Artist");
        chatWithArtistButton.setLayoutX(218);
        chatWithArtistButton.setLayoutY(190);
        chatWithArtistButton.setStyle("-fx-background-color: #4CAF50;");

        Button reactionButton = new Button();
        reactionButton.setLayoutX(218);
        reactionButton.setLayoutY(153);

        // Create Image and ImageView
        Image loveImage = new Image("file:/D:/Trimester/8th/AOOP/IntellijIdea/Test_Project/src/main/java/Icon/Love.png");
        ImageView imageView = new ImageView(loveImage);
        imageView.setFitWidth(20);
        imageView.setFitHeight(20);
        reactionButton.setGraphic(imageView);


        boolean hasReacted = checkUserReaction(paintingId);
        updateReactionButtonStyle(reactionButton, hasReacted);

        reactionButton.setOnAction(event -> handleReaction(paintingId, reactionButton, reactionText));


        ImageView paintingImageView = new ImageView();
        paintingImageView.setFitWidth(150);
        paintingImageView.setFitHeight(150);
        paintingImageView.setLayoutX(20);
        paintingImageView.setLayoutY(20);


        //Loading the image
        File imageFile = new File(imageUrl);
        if (imageFile.exists()) {
            try {
                Image image = new Image(imageFile.toURI().toString());
                paintingImageView.setImage(image);
            } catch (Exception e) {
                System.out.println("Error loading image: " + e.getMessage());
                setPlaceholderImage(paintingImageView);
            }
        } else {
            System.out.println("Image file not found: " + imageUrl);
            setPlaceholderImage(paintingImageView);
        }

        card.getChildren().addAll(titleText, artistText, yearText, categoryText, priceText, reactionText, addToCartButton, chatWithArtistButton, reactionButton,paintingImageView);

        return card;
    }

    //setting image

    private void setPlaceholderImage(ImageView imageView) {
        // Set a placeholder image
        File placeholderFile = new File(IMAGE_DIRECTORY, "placeholder.png");
        if (placeholderFile.exists()) {
            imageView.setImage(new Image(placeholderFile.toURI().toString()));
        } else {
            System.out.println("Placeholder image not found");
        }
    }

    // reaction check
    private boolean checkUserReaction(int paintingId) {
        String query = "SELECT * FROM reactions WHERE user_id = ? AND painting_id = ?";
        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, paintingId);
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next(); // If there's a result, the user has reacted
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // reaction button style
    private void updateReactionButtonStyle(Button button, boolean hasReacted) {
        if (hasReacted) {
            button.setStyle("-fx-background-color: Red;"); // Pink background for reacted
        } else {
            button.setStyle("-fx-background-color: #FFFFFF;"); // White background for not reacted
        }
    }

    // handle reaction in database
    private void handleReaction(int paintingId, Button reactionButton, Text reactionText) {
        boolean currentlyReacted = checkUserReaction(paintingId);
        String query;
        if (currentlyReacted) {
            query = "DELETE FROM reactions WHERE user_id = ? AND painting_id = ?";
        } else {
            query = "INSERT INTO reactions (user_id, painting_id) VALUES (?, ?)";
        }

        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, paintingId);
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                // Update UI
                updateReactionButtonStyle(reactionButton, !currentlyReacted);
                int newReactionCount = Integer.parseInt(reactionText.getText()) + (currentlyReacted ? -1 : 1);
                reactionText.setText(String.valueOf(newReactionCount));
            }

            // Handle notification
            if (currentlyReacted) {
                removeNotification(paintingId);
            } else {
                addNotification(paintingId);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception
        }
    }


    private void addNotification(int paintingId) {
        String query = "INSERT INTO notifications (user_id, type, title, message, created_at) " +
                "SELECT artist_id, 'reaction', 'New Reaction', CONCAT(?, ' reacted to your painting'), NOW() " +
                "FROM paintings WHERE painting_id = ?";
        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, getUserName()); // Assuming you have a method to get the current user's name
            pstmt.setInt(2, paintingId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception
        }
    }

    private void removeNotification(int paintingId) {
        String query = "DELETE FROM notifications " +
                "WHERE user_id = (SELECT artist_id FROM paintings WHERE painting_id = ?) " +
                "AND type = 'reaction' " +
                "AND message LIKE CONCAT(?, ' reacted to your painting')";
        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, paintingId);
            pstmt.setString(2, getUserName()); // Assuming you have a method to get the current user's name
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception
        }
    }

    private String getUserName() {
        String query = "SELECT name FROM users WHERE user_id = ?";
        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("name");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "Unknown User";
    }


    // Cart handle
    private void addToCart(int paintingId, String paintingTitle) {
        String query = "INSERT INTO cart (user_id, painting_id, quantity) VALUES (?, ?, 1) ON DUPLICATE KEY UPDATE quantity = quantity + 1";
        try (Connection conn = dbConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, paintingId);
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                System.out.println("Item added to cart successfully");

                showSweetAlert(paintingTitle);
            } else {
                System.out.println("Failed to add item to cart");
                showErrorAlert();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error adding item to cart: " + e.getMessage());
            showErrorAlert();
        }
    }

    private void showSweetAlert(String paintingTitle) {
        Notifications.create()
                .title("Added to Cart")
                .text(paintingTitle + " has been added to your cart.")

                .position(Pos.CENTER)
                .hideAfter(Duration.seconds(5))
                .show();
    }

    private void showErrorAlert() {
        Notifications.create()
                .title("Error")
                .text("Failed to add item to cart. Please try again.")

                .position(Pos.CENTER)
                .hideAfter(Duration.seconds(5))
                .showError();
    }




    @FXML
    void goCustomerAuction(ActionEvent event) throws IOException {
        loadPageWithUserId(event, "Customer/customerLiveAuctionPage.fxml");

    }

    @FXML
    void goCustomerCart(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerPaintingCheckout.fxml");

    }

    @FXML
    void goCustomerEvents(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerEventPage.fxml");

    }


    @FXML
    void goCustomerHome(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerHomePage.fxml");

    }

    @FXML
    void goCustomerMessages(ActionEvent event) throws IOException {
        System.out.println("CustomerHomePageController: Navigating to Messages page");

        // Instead of direct FXMLLoader usage, use BaseController's loadPage method
        loadPageWithUserId(event, "Customer/customerMessengerPage.fxml");

    /* No need for manual controller setup and userId setting because:
       1. BaseController.loadPage() automatically handles loading the FXML
       2. It automatically passes the userId to the new controller via setUserId()
       3. The CustomerMessengerController extends BaseController and implements proper setUserId()
    */
    }

    @FXML
    void goCustomerNFT(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerNFTpage.fxml");

    }

    @FXML
    void goCustomerNotification(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerNotification.fxml");

    }

    @FXML
    void goCustomerPaintings(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerPaintingPage.fxml");

    }

    @FXML
    void goCustomerProfile(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerProfilePage.fxml");

    }

    @FXML
    void goCustomerTopArt(ActionEvent event) throws IOException {
        loadPageWithUserId(event,"Customer/customerPageTopArt.fxml");

    }

    @FXML
    void customerLogout(ActionEvent event) throws IOException {
        System.out.println("CustomerHomePage : Logging out user");
        // Clear any user-specific data or session information here if needed

        // Navigate to the login page
        FXMLLoader loader = new FXMLLoader(getClass().getResource("Customer/customerLoginPage.fxml"));
        Parent root = loader.load();

        Scene scene = new Scene(root);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();

        System.out.println("customerPaintingController: Navigated to login page");

    }



    private void loadPageWithUserId(ActionEvent event, String fxmlPath) throws IOException {
        System.out.println("customerPaintingController: loadPageWithUserId() called with path: " + fxmlPath);
        FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));
        Parent root = loader.load();

        BaseController controller = loader.getController();
        if (controller != null) {
            System.out.println("customerPaintingController: Setting userId " + userId + " on new controller");
            controller.setUserId(this.userId);
        } else {
            System.out.println("customerPaintingController: Warning - controller is null");
        }

        Scene scene = new Scene(root);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }


}

//this is the first version of CustomerMessageController.java.
package com.example.test_project;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.event.ActionEvent;
import java.io.*;
import java.net.Socket;
import java.sql.*;

public class CustomerMessageController extends BaseController {

    @FXML private ListView<String> messageListView;
    @FXML private TextField messageField;
    @FXML private Label chatPartnerLabel;
    @FXML private ListView<String> chatPartnerListView;

    private PrintWriter out;
    private BufferedReader in;
    private int currentArtistId;
    private String currentArtistName;

    @FXML
    public void initialize() {
        System.out.println("Initializing CustomerMessengerController");
        validateComponents();
    }

    private void validateComponents() {
        if (messageListView == null) System.err.println("Error: messageListView is null");
        if (messageField == null) System.err.println("Error: messageField is null");
        if (chatPartnerLabel == null) System.err.println("Error: chatPartnerLabel is null");
        if (chatPartnerListView == null) System.err.println("Error: chatPartnerListView is null");
    }

    @Override
    public void setUserId(int userId) {
        super.setUserId(userId);
        System.out.println("CustomerMessengerController: Setting userId to " + userId);
        connectToServer();
        loadChatPartners();
    }

    private void connectToServer() {
        try {
            Socket socket = new Socket("localhost", 12345);
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            new Thread(this::readMessagesFromServer).start();

            out.println(userId);
            System.out.println("Connected to server successfully");
        } catch (IOException e) {
            System.err.println("Error connecting to server: " + e.getMessage());
            e.printStackTrace();
            showAlert("Connection Error", "Failed to connect to the server. Please try again later.");
        }
    }

    private void readMessagesFromServer() {
        try {
            String message;
            while ((message = in.readLine()) != null) {
                System.out.println("Received message: " + message);
                if (message.startsWith("MESSAGE ")) {
                    String[] parts = message.split(" ", 3);
                    int senderId = Integer.parseInt(parts[1]);
                    String content = parts[2];
                    Platform.runLater(() -> displayMessage(senderId, content));
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading messages from server: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void displayMessage(int senderId, String content) {
        String displayText = (senderId == userId) ? "You: " + content : "Artist: " + content;
        System.out.println("Displaying message: " + displayText);
        if (messageListView != null) {
            messageListView.getItems().add(displayText);
        } else {
            System.err.println("Error: messageListView is null when trying to display message");
        }
    }

    @FXML
    void sendMessage() {
        String message = messageField.getText();
        if (!message.isEmpty() && currentArtistId != 0) {
            System.out.println("Sending message: " + message + " to artist ID: " + currentArtistId);
            out.println("SEND " + currentArtistId + " " + message);
            saveChatMessage(userId, currentArtistId, message);
            messageField.clear();
        } else {
            System.out.println("Message not sent. Empty message or no artist selected.");
        }
    }

    private void saveChatMessage(int senderId, int receiverId, String content) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO ChatMessages (sender_id, receiver_id, content) VALUES (?, ?, ?)")) {
            pstmt.setInt(1, senderId);
            pstmt.setInt(2, receiverId);
            pstmt.setString(3, content);
            pstmt.executeUpdate();
            System.out.println("Message saved to database");
        } catch (SQLException e) {
            System.err.println("Error saving message to database: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void loadChatPartners() {
        System.out.println("Loading chat partners for user ID: " + userId);
        chatPartnerListView.getItems().clear();
        String query = "SELECT DISTINCT u.user_id, u.name " +
                "FROM Users u " +
                "JOIN ChatMessages m ON (u.user_id = m.sender_id OR u.user_id = m.receiver_id) " +
                "WHERE (m.sender_id = ? OR m.receiver_id = ?) AND u.user_id != ? AND u.role = 'artist' " +
                "ORDER BY u.name";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, userId);
            pstmt.setInt(3, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                int artistId = rs.getInt("user_id");
                String artistName = rs.getString("name");
                System.out.println("Adding chat partner: " + artistName + " (ID: " + artistId + ")");
                chatPartnerListView.getItems().add(artistName);
            }

            setupChatPartnerSelection();
        } catch (SQLException e) {
            System.err.println("Error loading chat partners: " + e.getMessage());
            e.printStackTrace();
            showAlert("Database Error", "Failed to load chat partners. Please try again later.");
        }
    }

    private void setupChatPartnerSelection() {
        chatPartnerListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null) {
                System.out.println("Selected chat partner: " + newValue);
                initChat(getArtistIdByName(newValue), newValue);
            }
        });
    }

    private int getArtistIdByName(String artistName) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT user_id FROM Users WHERE name = ? AND role = 'artist'")) {
            // Fix: Change setInt to setString since artistName is a String
            pstmt.setString(1, artistName);  // Changed from setInt to setString
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                int artistId = rs.getInt("user_id");
                System.out.println("Found artist ID: " + artistId + " for name: " + artistName);
                return artistId;
            }
        } catch (SQLException e) {
            System.err.println("Error getting artist ID: " + e.getMessage());
            e.printStackTrace();
        }
        System.out.println("Artist ID not found for name: " + artistName);
        return -1;
    }

    public void initChat(int artistId, String artistName) {
        System.out.println("Initializing chat with artist ID: " + artistId + ", name: " + artistName);
        this.currentArtistId = artistId;
        this.currentArtistName = artistName;
        chatPartnerLabel.setText("Chat with " + artistName);
        loadChatHistory(artistId);

        // Select the artist in the chat partner list view
        for (String item : chatPartnerListView.getItems()) {
            if (item.equals(artistName)) {
                chatPartnerListView.getSelectionModel().select(item);

                break;
            }
        }
    }

    private void loadChatHistory(int artistId) {
        System.out.println("Loading chat history with artist ID: " + artistId);
        messageListView.getItems().clear();
        String query = "SELECT sender_id, content FROM ChatMessages " +
                "WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) " +
                "ORDER BY sent_at";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, artistId);
            pstmt.setInt(3, artistId);
            pstmt.setInt(4, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                displayMessage(rs.getInt("sender_id"), rs.getString("content"));
            }
        } catch (SQLException e) {
            System.err.println("Error loading chat history: " + e.getMessage());
            e.printStackTrace();
            showAlert("Database Error", "Failed to load chat history. Please try again later.");
        }
    }



    private void showAlert(String title, String content) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(content);
            alert.showAndWait();
        });
    }

    // Navigation methods using BaseController's loadPage method
    @FXML void CustomerLogout(ActionEvent event) throws IOException {
        loadPage(event, "Guest/userOrGuestHomePage.fxml");
    }

    @FXML void goCustomerHome(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerHomePage.fxml");
    }

    @FXML void goCustomerPaintings(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPaintingPage.fxml");
    }

    @FXML void goCustomerTopArt(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPageTopArt.fxml");
    }

    @FXML void goCustomerEvents(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerEventPage.fxml");
    }

    @FXML void goCustomerAuction(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerLiveAuctionPage.fxml");
    }

    @FXML void goCustomerNFT(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerNFTpage.fxml");
    }

    @FXML void goCustomerProfile(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerProfilePage.fxml");
    }

    @FXML void goCustomerCart(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPaintingCheckout.fxml");
    }

    @FXML void goCustomerNotification(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerNotification.fxml");
    }

    @FXML void goCustomerMessages(ActionEvent event) {
        System.out.println("Already on the messages page");
    }
}


Controller backup 8 am
//this CustomerMessageController.java is 2nd version or updated with new codes. with the new codes, it is showing received messages twice.
package com.example.test_project;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.event.ActionEvent;
import java.io.*;
import java.net.Socket;
import java.sql.*;
import java.util.Set;
import java.util.HashSet;
public class CustomerMessageController extends BaseController {

    @FXML private ListView<String> messageListView;
    @FXML private TextField messageField;
    @FXML private Label chatPartnerLabel;
    @FXML private ListView<String> chatPartnerListView;

    private PrintWriter out;
    private BufferedReader in;
    private int currentArtistId;
    private String currentArtistName;
    private boolean isHandlingSelection = false;

    @FXML
    public void initialize() {
        System.out.println("Initializing CustomerMessengerController");
        validateComponents();
    }

    private void validateComponents() {
        if (messageListView == null) System.err.println("Error: messageListView is null");
        if (messageField == null) System.err.println("Error: messageField is null");
        if (chatPartnerLabel == null) System.err.println("Error: chatPartnerLabel is null");
        if (chatPartnerListView == null) System.err.println("Error: chatPartnerListView is null");
    }

    @Override
    public void setUserId(int userId) {
        super.setUserId(userId);
        System.out.println("CustomerMessengerController: Setting userId to " + userId);
        connectToServer();
        loadChatPartners();
    }

    private Set<String> displayedMessageIds = new HashSet<>();

    private void displayMessage(int senderId, String content) {
        String displayText = (senderId == userId) ? "You: " + content : "Artist: " + content;
        String messageId = senderId + "_" + content.hashCode() + "_" + System.currentTimeMillis();

        if (!displayedMessageIds.contains(messageId)) {
            System.out.println("Displaying message: " + displayText);
            if (messageListView != null) {
                messageListView.getItems().add(displayText);
                displayedMessageIds.add(messageId);
            } else {
                System.err.println("Error: messageListView is null when trying to display message");
            }
        } else {
            System.out.println("Message already displayed, skipping: " + displayText);
        }
    }
    private void connectToServer() {
        try {
            Socket socket = new Socket("localhost", 12345);
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            new Thread(this::readMessagesFromServer).start();

            out.println(userId);
            System.out.println("Connected to server successfully");
        } catch (IOException e) {
            System.err.println("Error connecting to server: " + e.getMessage());
            e.printStackTrace();
            showAlert("Connection Error", "Failed to connect to the server. Please try again later.");
        }
    }

    private void readMessagesFromServer() {
        try {
            String message;
            while ((message = in.readLine()) != null) {
                System.out.println("Received message: " + message);
                if (message.startsWith("MESSAGE ")) {
                    String[] parts = message.split(" ", 3);
                    int senderId = Integer.parseInt(parts[1]);
                    String content = parts[2];
                    Platform.runLater(() -> displayMessage(senderId, content));
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading messages from server: " + e.getMessage());
            e.printStackTrace();
        }
    }



    @FXML
    void sendMessage() {
        String message = messageField.getText().trim();
        if (!message.isEmpty() && currentArtistId != 0) {
            System.out.println("Sending message: " + message + " to artist ID: " + currentArtistId);
            out.println("SEND " + currentArtistId + " " + message);
            saveChatMessage(userId, currentArtistId, message);
            messageField.clear();
        } else {
            System.out.println("Message not sent. Empty message or no artist selected.");
        }
    }

    private void saveChatMessage(int senderId, int receiverId, String content) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO ChatMessages (sender_id, receiver_id, content, sent_at, is_read) VALUES (?, ?, ?, NOW(), false)")) {
            pstmt.setInt(1, senderId);
            pstmt.setInt(2, receiverId);
            pstmt.setString(3, content);
            pstmt.executeUpdate();
            System.out.println("Message saved to database");
        } catch (SQLException e) {
            System.err.println("Error saving message to database: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void initChat(int artistId, String artistName) {
        System.out.println("Initializing chat with artist ID: " + artistId + ", name: " + artistName);

        // Check if artist exists in chat list
        boolean artistExists = checkArtistExistsInChatHistory(artistId);

        // If artist doesn't exist in chat list, add them
        if (!artistExists) {
            System.out.println("Adding new artist to chat list: " + artistName);
            addInitialChatMessage(artistId);
        }

        // Set current artist and update UI
        this.currentArtistId = artistId;
        this.currentArtistName = artistName;
        chatPartnerLabel.setText("Chat with " + artistName);

        // Reload chat list and history
        loadChatPartners();
        loadChatHistory(artistId);
        selectArtistInList(artistName);
    }

    private boolean checkArtistExistsInChatHistory(int artistId) {
        String query = "SELECT COUNT(*) FROM ChatMessages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?)";
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, artistId);
            pstmt.setInt(3, artistId);
            pstmt.setInt(4, userId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private void addInitialChatMessage(int artistId) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO ChatMessages (sender_id, receiver_id, content, sent_at, is_read) VALUES (?, ?, ?, NOW(), false)")) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, artistId);
            pstmt.setString(3, "Chat started");
            pstmt.executeUpdate();
            System.out.println("Initial chat message created for artist ID: " + artistId);
        } catch (SQLException e) {
            System.err.println("Error creating initial chat message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void selectArtistInList(String artistName) {
        Platform.runLater(() -> {
            chatPartnerListView.getSelectionModel().select(artistName);
        });
    }

    private void loadChatHistory(int artistId) {
        messageListView.getItems().clear();
        displayedMessageIds.clear(); // Clear the set when loading a new chat history
        String query = "SELECT sender_id, content FROM ChatMessages " +
                "WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) " +
                "ORDER BY sent_at";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, artistId);
            pstmt.setInt(3, artistId);
            pstmt.setInt(4, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                if (!rs.getString("content").equals("Chat started")) {
                    displayMessage(rs.getInt("sender_id"), rs.getString("content"));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error loading chat history: " + e.getMessage());
            e.printStackTrace();
            showAlert("Database Error", "Failed to load chat history. Please try again later.");
        }
    }

    private void loadChatPartners() {
        System.out.println("Loading chat partners for user ID: " + userId);
        chatPartnerListView.getItems().clear();
        String query = "SELECT DISTINCT u.user_id, u.name " +
                "FROM Users u " +
                "JOIN ChatMessages m ON (u.user_id = m.sender_id OR u.user_id = m.receiver_id) " +
                "WHERE (m.sender_id = ? OR m.receiver_id = ?) AND u.user_id != ? AND u.role = 'artist' " +
                "ORDER BY (SELECT MAX(sent_at) FROM ChatMessages " +
                "WHERE (sender_id = ? AND receiver_id = u.user_id) OR " +
                "(sender_id = u.user_id AND receiver_id = ?)) DESC";

        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, userId);
            pstmt.setInt(3, userId);
            pstmt.setInt(4, userId);
            pstmt.setInt(5, userId);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                String artistName = rs.getString("name");
                chatPartnerListView.getItems().add(artistName);
            }

            setupChatPartnerSelection();
        } catch (SQLException e) {
            System.err.println("Error loading chat partners: " + e.getMessage());
            e.printStackTrace();
            showAlert("Database Error", "Failed to load chat partners. Please try again later.");
        }
    }

    private void setupChatPartnerSelection() {
        chatPartnerListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue != null && !isHandlingSelection) {
                try {
                    isHandlingSelection = true;

                    if (currentArtistName != null && currentArtistName.equals(newValue)) {
                        return;
                    }

                    System.out.println("Selected chat partner: " + newValue);
                    int artistId = getArtistIdByName(newValue);
                    if (artistId != -1) {
                        currentArtistId = artistId;
                        currentArtistName = newValue;
                        chatPartnerLabel.setText("Chat with " + newValue);
                        loadChatHistory(artistId);
                    } else {
                        System.err.println("Could not find artist ID for: " + newValue);
                        showAlert("Error", "Could not load chat with selected artist.");
                        if (oldValue != null) {
                            Platform.runLater(() -> chatPartnerListView.getSelectionModel().select(oldValue));
                        }
                    }
                } finally {
                    isHandlingSelection = false;
                }
            }
        });
    }

    private int getArtistIdByName(String artistName) {
        try (Connection conn = DataBaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement("SELECT user_id FROM Users WHERE name = ? AND role = 'artist'")) {
            pstmt.setString(1, artistName);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("user_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    private void showAlert(String title, String content) {
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(content);
            alert.showAndWait();
        });
    }

    // Navigation methods
    @FXML void CustomerLogout(ActionEvent event) throws IOException {
        loadPage(event, "Guest/userOrGuestHomePage.fxml");
    }

    @FXML void goCustomerHome(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerHomePage.fxml");
    }

    @FXML void goCustomerPaintings(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPaintingPage.fxml");
    }

    @FXML void goCustomerTopArt(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPageTopArt.fxml");
    }

    @FXML void goCustomerEvents(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerEventPage.fxml");
    }

    @FXML void goCustomerAuction(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerLiveAuctionPage.fxml");
    }

    @FXML void goCustomerNFT(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerNFTpage.fxml");
    }

    @FXML void goCustomerProfile(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerProfilePage.fxml");
    }

    @FXML void goCustomerCart(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerPaintingCheckout.fxml");
    }

    @FXML void goCustomerNotification(ActionEvent event) throws IOException {
        loadPage(event, "Customer/customerNotification.fxml");
    }

    @FXML void goCustomerMessages(ActionEvent event) {
        System.out.println("Already on the messages page");
    }
}
